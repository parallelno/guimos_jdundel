;===========================================================================
; Why do we reserve two bytes before each data block in the ram-disk?
;===========================================================================

To retrieve the data from the ram-disk we use the stack operation:
...
LXI SP, RAM_DISK_DATA ; the actual ram-disk data we want to read
POP BC ; read the first pair of bytes
...

When we set the SP by "LXI SP", the interruption call can happen. It stores 
the return addr to the stack. But the SP points to the ram-disk data now, so 
it stores the return addr into two bytes BEFORE our ram-disk data. We can't 
prevent that because it's a hardware specific, So we must keep two bytes gap
before every ram-disk data allowing the interruption routine corrups it.


;===========================================================================
; Why can addresses 0x0000 and 0x0001 be corrupted in RAM and the working 
; RAM-disk?
;===========================================================================

What is a working ram-disk?
The one the engine operates. It's defined by RAM_DISK_PORT const.

What is usually stored at these addresses?
In the RAM-disk, these addresses usually contain zeroes due to the specifics
of RAM-disk read operations. In main RAM, these addresses store the reboot 
opcode and the reboot address.

What causes corruption?
The data at these addresses can be corrupted by the interrupt routine during
 the RAM-disk mounting macro.

Why donâ€™t we fix this corruption?
This was a trade-off. By sacrificing these two bytes and the reboot functionality,
we gain more usable memory on the RAM-disk.

How it was implemented:
Originally the ram-disk mounting operation was organized this way:
1. Mount the ram-disk to allow reading the ram-disk data via the stack operations
2. Call the func to process the ram-disk data (ex.: sprite_draw)
3. ram-disk unmounting

The interruption routine can corrupts the ram-disk data right in the moment 
we mounted the ram-disk. To avoid it, the orogonal approach dictated to 
reserve the stacks (main stack and the interruption stack) in every bank of
working ram-disk. That means every ram-disk bank contained the reserved 
space right in the middle. It eats the ram-disk space and the increase the
memory fragmentation.

The new approach removes those stacks from the ram-disk. The solution is to 
set the SP to 0x0002 right before the ram-disk mounting. The interruption 
routine still can corrupt it, but it usually doesn't contain meaningfull 
data there because of specifics of reading the data from the ram-disk. See 
"Why do we reserve two bytes before each data block in the ram-disk?" for 
more details.
The only meaningfull data is in the RAM. It contains the reboot opcode and 
the reboot addr. I found it's OK to socrifice it, because that functionality 
can be easily replaced with the in-game reboot option like in many other 
games.

;===========================================================================
; Accessing different ram-disk data segments in one bank
;===========================================================================

If you want to jump between separate ram-disk data segments (font elements 
for example), use lxi sp, 0x0002 safe addr before the next lxi sp, ADDR or 
sphl operation. Check the draw_text_ex func for implementation details.