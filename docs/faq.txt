;===========================================================================
; Why do we reserve two bytes before each data block in the ram-disk?
;===========================================================================

To retrieve the data from the ram-disk we use the stack operation:
...
LXI SP, RAM_DISK_DATA ; the actual ram-disk data we want to read
POP BC ; read the first pair of bytes
...

If the interruption call happen right after "LXI SP", it stores the return 
addr into the stack. But the SP points to the ram-disk data now, so it 
rewrites the data with the return addr. We can't prevent that because it's a
hardware specific behavior. To avoid this issue we keep two empty bytes before 
every ram-disk data block.

;===========================================================================
; Why the stack buffers are in the RAM and the working RAM-disk?
;===========================================================================

- What is a working ram-disk?
The one the engine uses. It's defined by RAM_DISK_PORT const.

- What we need to keep the stack in the ram-disk?
Retrieving the data from the ram-disk via the stack operations consists of two
major operations: 
* mounting the ram-disk (out ram_disk_port)
* setting up the SP pointer (LXI SP, RAM_DISK_DATA)

The catch here is in between these two operations. If interruption call 
happens before the SP points to the data it will corrupt the ram-disk data 
at the address where SP pointed. Also the main code can make several calls 
before reaching out LXI SP, RAM_DISK_DATA. That means we have to make sure 
the stack is present in every bank of the ram-disk.

;===========================================================================
; Accessing different ram-disk data segments in one bank
;===========================================================================

If you implement the routin where you need temporal access to BC or jump 
between ram-disk banks, use lxi sp, STACK_SAFE_ADDR (0x0002) safe addr before 
doing it. It's safe because we always reserve two bytes before each data block. 
Check the draw_text_ex func for implementation details.

;===========================================================================
; Why some subroutines are .function, and others not
;===========================================================================

Retroassembler provides a handy functionality with .function tag. If a function
isn't used in the code, it is not included into assembly.
But that .function has disadvanages. Firstly, it add RET instruction at the end,
no matter if it's needed. The second, you execute a call to a label inside the 
func. The lastly, you can conditionaly call a .function.
With all of it been said, I decided to only use .functions in the utils assembly
where not all subroutines are required for the particular game. If you do not
need functionality, lets say, tiled images, it's more meaninful to exclude the 
whole asm module.

;===========================================================================
; How extract breakpoints from the code into a debug data
;===========================================================================

If you type '.breakpoint "<OPERAND> <OPERATOR> <VALUE> <COMMENT>"' in the code, the build
system adds a breakpoint at this address into the debug data. Where: 
<OPERAND> - is a REG, REG PAIR, PC, SP, CC, or any valid operand.
<OPERATOR> - =ANY, =, !=, >, <, >=, <=, etc.
<VALUE> - hex value.
<COMMENT> - all the remainig string in the quotes is interpretted as a comment.

Examples:
.breakpoint
.breakpoint "HL < 0x1d23"
.breakpoint "DE < 0xA000 sprite_copy_to_scr_v"

;===========================================================================
; How extract watchpoints from the code into a debug data
;===========================================================================

If you type "<prefix>watchpointStart<RW/R/W><On/Off>_<label_name>: = address" 
in the code, the build system adds a watchpoint to your debug data at that 
address. Where:
<prefix> can be '@' or any other valid label string.

Examples:
@watchpointStartOffRW_hero_runtime_data: = hero_runtime_data ; adds the watchpoint to the debug data
@watchpointEnd_hero_runtime_data: = hero_runtime_data_end	; adds the watchpoint to the debug data

;===========================================================================
; How to mark the code that it needs a code performance check
;===========================================================================

If you add "codePerfStart_<label_name>" and "codePerfEnd_<label_name>" markers
to your code, the build system adds a code perf block enity with those addresses
to our debug data.
