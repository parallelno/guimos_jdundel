;===========================================================================
; Why do we reserve two bytes before each data block in the ram-disk?
;===========================================================================

To retrieve the data from the ram-disk we use the stack operation:
...
LXI SP, RAM_DISK_DATA ; the actual ram-disk data we want to read
POP BC ; read the first pair of bytes
...

If the interruption call happen right after "LXI SP", it stores the return 
addr into the stack. But the SP points to the ram-disk data now, so it 
rewrites the data with the return addr. We can't prevent that because it's a
hardware specific behavior. To avoid this issue we keep two empty bytes before 
every ram-disk data block.

;===========================================================================
; Why the stack buffers are in the RAM and the working RAM-disk?
;===========================================================================

- What is a working ram-disk?
The one the engine uses. It's defined by RAM_DISK_PORT const.

- What we need to keep the stack in the ram-disk?
Retrieving the data from the ram-disk via the stack operations consists of two
major operations: 
* mounting the ram-disk (out ram_disk_port)
* setting up the SP pointer (LXI SP, RAM_DISK_DATA)

The catch here is in between these two operations. If interruption call 
happens before the SP points to the data it will corrupt the ram-disk data 
at the address where SP pointed. Also the main code can make several calls 
before reaching out LXI SP, RAM_DISK_DATA. That means we have to make sure 
the stack is present in every bank of the ram-disk.

;===========================================================================
; Accessing different ram-disk data segments in one bank
;===========================================================================

If you implement the routin where you need temporal access to BC or jump 
between ram-disk banks, use lxi sp, STACK_TEMP_ADDR safe addr before doing 
it. Check the draw_text_ex func or TILED_IMG_DRAW_TILE for implementation
details.

;===========================================================================
; Why some subroutines are .function, and others not?
;===========================================================================

Retroassembler provides a handy functionality with a function tag. If a 
function isn't used in the code, it is not included in assembly.
But functions have disadvantages. Firstly, it adds RET instruction at the end,
no matter if it's required. Secondly, you can't call a label somewhere inside
the function, only a function name. Lastly, you can't conditionally call a 
function. With all of it being said, I decided to only use .functions in the 
utils assembly where not all subroutines are required for the particular game. 
If you do not need the functionality, let's say, tiled images, it's more 
meaningful to exclude the whole ASM module.

;===========================================================================
; How to extract breakpoints from the code into debug data?
;===========================================================================

If you type '.breakpoint "<OPERAND> <OPERATOR> <VALUE> <COMMENT>"' in the 
code, the build system adds a breakpoint at this address into the debug data. 
Where: 
<OPERAND> - is a REG, REG PAIR, PC, SP, CC, or any valid operand.
<OPERATOR> - =ANY, =, !=, >, <, >=, <=, etc.
<VALUE> - hex value.
<COMMENT> - all the remainig string in the quotes is interpretted as a comment.

Examples:
.breakpoint
.breakpoint "HL < 0x1d23"
.breakpoint "DE < 0xA000 sprite_copy_to_scr_v"

;===========================================================================
; How to extract watchpoints from the code into a debug data?
;===========================================================================

If you type "<prefix>watchpointStart<RW/R/W><On/Off>_<label_name>: = address" 
in the code, the build system adds a watchpoint to your debug data at that 
address. Where:
<prefix> can be '@' or any other valid label string.

Examples:
@watchpointStartOffRW_hero_runtime_data: = hero_runtime_data ; adds the watchpoint to the debug data
@watchpointEnd_hero_runtime_data: = hero_runtime_data_end	; adds the watchpoint to the debug data

;===========================================================================
; How to mark the code that needs a code performance check?
;===========================================================================

If you add "codePerfStart_<label_name>" and "codePerfEnd_<label_name>" markers
to your code, the build system adds a code perf block enity with those addresses
to our debug data.

;===========================================================================
; How to add a script to the debug data?
;===========================================================================

You can add the script from the Devector emulator in a Script tab.
Also scripts can be exported from a build config. To make it, add the following
structure below:
"scripts": [
        {
            "active": true,
            "code": "local sp = GetSP()\nif sp > 0x7FBE and sp < 0x7FFE then return end\nlocal opcode = GetOpcode()\nif opcode > 0x4F then return end\nif opcode > 0x0E and opcode < 0x40 then return end\n\nlocal opcodesToSkip = {\n    [0x00] = true,\n    [0x02] = true,\n    [0x07] = true,\n    [0x08] = true,\n    [0x09] = true,\n    [0x0A] = true,\n}\nif opcodesToSkip[opcode] then return end\nif not GetINTE() then return end\nif GetByteGlobal(0x38) ~= 0xC3 or GetByteGlobal(0x39) ~= 0x78 or GetByteGlobal(0x3A) ~= 0x05 then return end\n\nprint(\"Warning! Overrideing BC in a stack critical section\")\nprint(string.format(\"PC = %04X\", GetPC()))\nprint(string.format(\"Opcode = %02X\", GetOpcode()))\nBreak()",
            "comment": "BC updated in the stack critical section",
            "id": 0
        }
    ],

;===========================================================================
; What functional the script supports?
;===========================================================================

Get the CPU state:
    GetCC() - get the CPU cicles
	GetPC() - get the program counter
	GetSP() - get the stack pointer
	GetPSW() - get the program status word
	GetBC() - get the BC register pair
	GetDE() - get the DE register pair
	GetHL() - get the HL register pair
	GetA() - get the A register
	GetF() - get the flags register
	GetB() - get the B register
	GetC() - get the C register
	GetD() - get the D register
	GetE() - get the E register
	GetH() - get the H register
	GetL() - get the L register

	GetFlagS() - get the Sign flag
	GetFlagZ() - get the Zero flag
	GetFlagAC() - get the Auxiliary Carry flag
	GetFlagP() - get the Parity flag
	GetFlagC() - get the Carry flag
	GetINTE() - get the Interrupt Enable flag
	GetIFF() - get the Interrupt Flip-Flop (IFF) state
	GetHLTA() - get the HL' (temporary HL) register
	GetMachineCycles() - get the current number of machine cycles

    GetOpcode() - the opcode of the executed instruction

Get memory state:
	GetByteGlobal() - get a byte at the global addr

Misc:
    Break - break the execution
UI:
	DrawText - render a fixed size text in the Render Window.
	DrawText(id, "TEXT", x, y, <color= 0xFFFFFFFF>)
	The color is in a format: RRGGBBAA

	DrawRect - render a rectangle in the Render Window.
	DrawRect(id, x, y, width, height, <color= 0xFFFFFFFF>)
	The color is in a format: RRGGBBAA

Script example:

local sp = GetSP()
if sp > 0x7FBE and sp < 0x7FFE then return end
local opcode = GetOpcode()
if opcode > 0x4F then return end
if opcode > 0x0E and opcode < 0x40 then return end

local opcodesToSkip = {
    [0x00] = true,
    [0x02] = true,
    [0x07] = true,
    [0x08] = true,
    [0x09] = true,
    [0x0A] = true,
}
if opcodesToSkip[opcode] then return end
if not GetINTE() then return end
if GetByteGlobal(0x38) ~= 0xC3 or GetByteGlobal(0x39) ~= 0x78 or GetByteGlobal(0x3A) ~= 0x05 then return end

print(\Warning! Overrideing BC in a stack critical section\)
print(string.format(\PC = %04X\, GetPC()))
print(string.format(\Opcode = %02X\, GetOpcode()))
Break()

Tips:
Each function call GetSP, GetHL, etc. is expensive. Try call it once, and 
cache it with a local variable like: "local sp = GetSP()".

;===========================================================================